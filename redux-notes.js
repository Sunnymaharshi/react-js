/*
    Redux 
        predictable state container for js apps 
        can be used in react, angular, vue or vanilla js also 
    Redux toolkit 
        official opinionated toolset for efficient redux development 
        standard way to write redux logic 
    React-Redux 
        official redux UI binding library for react 
    store 
        holds state of the application 
    action 
        describes what happened in the application
    reducer 
        ties store and actions together
        handles the action and decides how to update the state 
    3 principles 
        1.global state of your app is stored as an object inside a single store 
        2.only way to change the state is to dispatch an action
            object that describes what happened
        3.to specify how state tree is updated based on actions 
            you write pure reducers (must be a pure function)
            returns new state 
    folder structure 
        app/store.js 
        features/<slice_name>/<slice_name>Slice.js
    code
        action 
            object with type property & optional payload property
            which can be used to pass additional info (args)
        action creator 
            function that creates action 
            if needed updation, this will be only place we need to update
            instead of updating every place where action is used
        reducer 
            function that takes action & updates state 
            (prevState,action) => newState
        Middleware 
            to do something btw dispatching action and it reaches reducer 
            ex: logging, crash reporting, performing async tasks etc
        Async Actions 
            actions where reducers run asynchronously like fetch              
            Redux Thunk Middleware library
                define async action creators 
                after fetch we can dispatch the action with fetched payload
    redux toolkit code
        configureStore 
            from reduxjs/toolkit
            accepts {reducer, middleware}
            reducer
                {slice_name: sliceReducer}
            middleware
                function that returns middlewares 
        createSlice 
            from reduxjs/toolkit
            accepts {name, initialState, reducers:{}, extraReducers:{}}
            returns object with main reducer & actions  
            reducers                 
                in reduxjs/toolkit
                    only responds to actions of that slice
                in redux 
                    if action is present in different reducer also, both will run
                {ordered : ()=>{}, restocked: ()=>{}}
                reducer functions
                    can directly update state in reduxjs/toolkit (uses immer library internally)
                    accepts state, action
            actions
                createSlice will automatically generates actions with key as names
                ex: slice_name/key    
            extra reducers 
                if we want to respond to actions generated by different slice  also 
                accepts following function
                (builder)=>{
                    builder.addCase("action_name1", (state,payload)=>{ state.qty++ })
                    builder.addCase("action_name2", (state,payload)=>{ state.qty-- })
                }
            createAsyncThunk
                from reduxjs/toolkit
                accepts action_name, async function 
                returns actions 
                automatically generates pending, fulfilled & rejected actions
                we can add reducers in extraReducers
        react-redux 
            Provider 
                wrap app component with it to access store
                pass the store to it 
            useSelector hook 
                to access state, can access any slice data                 
                ex: useSelector((state) => state.user.user_id)
            useDispatch hook 
                returns dispatch function
                ex: dispatch(ordered())     
*/
